#!/usr/bin/python3
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2017-2020 Luke Horwell <code@horwell.me>
#

"""
Control Razer devices from the command line. Useful for commamd line users or bash scripting.
"""
VERSION = "0.5.0"

import argparse
import signal
import os
import sys

# Import modules if running relatively.
if os.path.exists(os.path.dirname(__file__) + "/pylib/"):
    try:
        import pylib.preferences as pref
        import pylib.common as common
        import pylib.locales as locales
        from pylib.backends import middleman
    except (ImportError, Exception) as e:
        print("Failed to import modules relatively.\n")
        raise e

# Import modules if installed system.-wide.
else:
    try:
        import polychromatic.preferences as pref
        import polychromatic.common as common
        import polychromatic.locales as locales
        from polychromatic.backends import middleman
    except (ImportError, Exception) as e:
        print("Polychromatic's modules could not be imported.")
        print("Check all dependencies are installed, the Python environment variables are correct, or try re-installing the application.\n")
        print(str(e))
        exit(1)


########################################
# Set up variables
########################################
dbg = common.Debugging()
path = pref.Paths()
_ = locales._
signal.signal(signal.SIGINT, signal.SIG_DFL)


########################################
# Valid Options
########################################
possible_devices = ["all", "keyboard", "mouse", "mousemat", "keypad", "headset", "gpu", "accessory"]
possible_effects = ["static", "wave", "spectrum", "reactive", "breath", "ripple", "starlight", "blinking", "pulsate"]
possible_wave_params = ["left", "right"]
possible_reactive_params = ["fast", "medium", "slow", "vslow"]
possible_breath_params = ["random", "single", "dual", "triple"]
possible_starlight_params = ["random", "single", "dual"]
possible_ripple_params = ["random", "single"]
possible_lighting_zones = ["main", "logo", "scroll", "backlight", "left", "right"]
possible_poll_rates = ["125", "500", "1000"]
min_dpi = 400

########################################
# Parse arguments
########################################
parser = argparse.ArgumentParser(add_help=False)
parser._optionals.title = _("These arguments can be specified")

# Device selection
parser.add_argument("-d", "--device", help=_("Select device(s) by its form factor. Default is all devices."), action="store", choices=possible_devices)
parser.add_argument("-s", "--serial", help=_("Select device by its serial number"), action="store")
parser.add_argument("-z", "--zone", help=_("Make change to specific zone. Defaults to 'all'."), action="store", choices=["all"] + possible_lighting_zones)

parser.add_argument("-l", "--list-devices", help=_("List connected Razer device(s)"), action="store_true")
parser.add_argument("--list-zones", help=_("Lists the zones available for device(s)"), action="store_true")
parser.add_argument("--list-status", help=_("Show information about device(s)"), action="store_true")

# Brightness
parser.add_argument("-b", "--brightness", help=_("Set brightness (between 0-100 or 0-1 for devices that only support on/off)"), action="store")

# Effects and parameters
parser.add_argument("-e", "--effect", help=_("Set a specific type of effect"), action="store", choices=possible_effects)
parser.add_argument("--wave-direction", help=_("For wave effect only"), choices=possible_wave_params)
parser.add_argument("--reactive-speed", help=_("For reactive effect only"), choices=possible_reactive_params)
parser.add_argument("--breath-type", help=_("For breath effect only"), choices=possible_breath_params)
parser.add_argument("--ripple-type", help=_("For ripple effect only"), choices=possible_ripple_params)
parser.add_argument("--ripple-speed", help=_("Ripple refresh rate. Default: 0.01"), action="store")
parser.add_argument("--starlight-type", help=_("For starlight effect only"), choices=possible_ripple_params)

# Colours
parser.add_argument("--rgb", help=_("Set the primary colour (e.g. '#00FF00' or 0,255,0)"))
parser.add_argument("--rgb2", help=_("Set the secondary colour (e.g. '#FF0000' or 255,0,0)"))
parser.add_argument("--rgb3", help=_("Set the tertiary colour (e.g. '#0000FF' or 0,0,255)"))

# Device-specific
parser.add_argument("--game-mode", help=_("Disable keys for uninterrupted gaming"), action="store", choices=["on", "off"])
parser.add_argument("--dpi", help=_("How fast the cursor moves. Example: 1800 or 1800,800"), action="store")
parser.add_argument("--poll-rate", help=_("How frequent the CPU polls the mouse"), action="store", choices=possible_poll_rates)

# Misc
parser.add_argument("--version", help=_("Print version and exit"), action="store_true")
parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
parser.add_argument("--locale", help=_("Force a specific language, e.g. de_DE"), action="store")

args = parser.parse_args()

# Was anything passed?
if not len(sys.argv) > 1:
    dbg.stdout(_("No arguments passed."), dbg.error)
    dbg.stdout(_("Type polychromatic-cli --help to see possible combinations."))
    exit(0)

if args.version:
    dbg.stdout(_("Version") + " " + VERSION)
    exit(0)

if args.locale:
    _ = locales.reload_locales(locales, __file__, args.locale)


########################################
# Pretty columns
########################################
def print_column(data):
    """
    Prints a basic 'pretty' table ensuring each column has enough room.

    Params:
        data = ["One", "2", "Item Three"]

    Output:
        "One         2           Item Three"
    """
    max_col_width = max(len(col) for row in data for col in row) + 2
    for row in data:
        print("".join(col.ljust(max_col_width) for col in row))


########################################
# List devices, zones or current status.
########################################
devices = middleman.get_device_list()
found_unsupported = False

if len(devices) == 0:
    dbg.stdout(_("No Razer devices connected."), dbg.error)
    exit(1)

if args.list_devices:
    print("")
    table = []

    for device in devices:
        table.append([
            "{0} - {1}".format(dbg.normal, device["name"]),
            "{0}{1}".format(dbg.success if device["available"] else dbg.error, device["form_factor"]),
            "{0}{1}".format(dbg.warning, device["serial"] if device["available"] else "")
        ])

        if device["available"] == False:
            found_unsupported = True

    print_column(table)

if args.list_zones:
    print("")
    table = []

    for device in devices:
        if not device["available"]:
            continue

        device = middleman.get_device(device["backend"], device["uid"])

        table.append([
            "- {0}{1}".format(dbg.normal, device["name"]),
            "{0}{1}".format(dbg.warning, ", ".join(device["zone_supported"].keys()))
        ])

    print_column(table)

if args.list_status:
    def _add_row(label, data, error_check=None):
        columns = []
        columns.append(dbg.action + label)

        if error_check == True:
            data_colour = dbg.success
        elif error_check == False:
            data_colour = dbg.error
        else:
            data_colour = dbg.normal

        columns.append(data_colour + data)
        return columns

    for device in devices:
        row = []
        available = device["available"]
        details = None

        if available:
            details = middleman.get_device(device["backend"], int(device["uid"]))
        else:
            found_unsupported = True

        row.append(_add_row(_("Form Factor"), device["form_factor"], available))

        if details:
            form_factor = device["form_factor_id"]

            row.append(_add_row("VID:PID", "{0}:{1}".format(details["vid"], details["pid"])))
            row.append(_add_row(_("Serial"), details["serial"]))
            row.append(_add_row(_("Firmware Version"), details["firmware_version"]))

            chroma_type = _("No")
            chroma_type_bool = False

            if details["matrix"] == True:
                chroma_type = _("Yes")
                chroma_type_bool = True

            if details["matrix"] == True and details["monochromatic"] == True:
                chroma_type = _("Yes (Mono)")
                chroma_type_bool = True

            row.append(_add_row(_("Chroma"), chroma_type, chroma_type_bool))
            row.append(_add_row(_("Zones"), ", ".join(details["zone_supported"].keys())))

            if form_factor == "keyboard":
                row.append(_add_row(_("Game Mode"), _("Enabled") if details["game_mode"] == True else _("Disabled"), details["game_mode"]))
                row.append(_add_row(_("Keyboard Layout"), details["keyboard_layout"]))

            if details["dpi_x"] != None:
                row.append(_add_row(_("DPI"), "X " + str(details["dpi_x"])))
                row.append(_add_row("", "Y " + str(details["dpi_y"])))
                row.append(_add_row(_("DPI Intervals"), ", ".join(str(x) for x in details["dpi_ranges"])))

            if details["poll_rate"] != None:
                row.append(_add_row(_("Poll Rate"), str(details["poll_rate"]) + " Hz"))

            if details["battery_level"] != None:
                row.append(_add_row(_("Battery"), str(details["battery_level"]) + "%"))

            if details["matrix"] == True:
                row.append(_add_row(_("Matrix Dimensions"), "{0} {2}, {1} {3}".format(
                    details["matrix_rows"],
                    details["matrix_cols"],
                    common.get_plural(details["matrix_rows"], _("row"), _("rows")),
                    common.get_plural(details["matrix_cols"], _("column"), _("columns"))
                )))

            for zone in details["zone_states"]:
                state = details["zone_states"][zone]
                supported = details["zone_supported"][zone]
                zone_name = "(" + details["zone_names"][zone] + ")"

                # Suppress "(main)" to avoid clutter as most devices only have a 'main' lighting zone.
                if zone == "main":
                    zone_name = ""

                # Print supported effects
                supported_effects = []
                for effect in supported.keys():
                    if effect not in ["breath_options", "starlight_options", "ripple_options", "brightness_slider", "brightness_toggle"]:
                        supported_effects.append(effect)

                if len(supported_effects) > 0:
                    row.append(_add_row("{0} {1}".format(_("Firmware Effects"), zone_name), ", ".join(supported_effects)))

                # Print brightness levels
                try:
                    if supported["brightness_slider"]:
                        row.append(_add_row("{0} {1}".format(_("Current Brightness"), zone_name), "{0}%".format(details["zone_states"][zone]["brightness"]), True if state["brightness"] > 0 else False))
                except KeyError:
                    pass

                try:
                    if supported["brightness_toggle"]:
                        row.append(_add_row("{0} {1}".format(_("Current Brightness"), zone_name), _("On") if state["brightness"] == 1 else _("Off"), state["brightness"]))
                except KeyError:
                    pass

                # Print last effect
                try:
                    if state["effect"]:
                        row.append(_add_row(_("Current Effect"), state["effect"]))

                    if state["colours"]:
                        row.append(_add_row(_("Last Colour (Primary)"), state["colours"]["primary"]))
                        row.append(_add_row(_("Last Colour (Secondary)"), state["colours"]["secondary"]))
                        row.append(_add_row(_("Last Colour (Tertiary)"), state["colours"]["tertiary"]))

                    if state["params_speed"]:
                        row.append(_add_row(_("Last Speed (Wave/Reactive)"), str(state["params_speed"])))

                    if state["params_direction"]:
                        row.append(_add_row(_("Last Direction (Wave)"), str(state["params_direction"])))

                except KeyError:
                    pass

        if not details:
            row.append(_add_row(_("Backend"), "OpenRazer"))

        dbg.stdout("\n" + device["name"])
        dbg.stdout("-".join("" for x in range(-1, max(len("".join(row[0])), len("".join(device["name"]))))))
        print_column(row)

if found_unsupported:
    dbg.stdout("\n" + _("Some Razer devices cannot be controlled as they haven't registered with the OpenRazer daemon."), dbg.warning)
    dbg.stdout(_("To diagnose, run: []").replace("[]", dbg.success + "polychromatic-controller --troubleshoot" + dbg.warning), dbg.warning)

# When using a --list-* parameter, exit here as devices won't be manipulated.
if args.list_devices or args.list_zones or args.list_status:
    exit()


########################################
# Determine devices and zones to change.
########################################
target_devices = []
target_zones = []

if args.zone and not args.zone == "all":
    target_zones = [args.zone]

if args.serial:
    for device in devices:
        if device["serial"] == args.serial:
            target_devices.append(device)
            break

    if len(target_devices) == 0:
        dbg.stdout("Cannot find a device with serial " + args.serial, dbg.error)
        exit(1)

    target_devices = [device]

elif args.device == "all" or not args.device:
    target_devices = devices

else:
    for device in devices:
        if device["form_factor_id"] == args.device:
            target_devices.append(device)

if len(target_devices) == 0:
    dbg.stdout(_("No specified Razer devices found."), dbg.error)
    exit(1)


# Quit if a device is selected, but there is nothing to do.
if not args.effect \
    and not args.game_mode \
    and not args.dpi \
    and not args.poll_rate \
    and not args.brightness:
        dbg.stdout(_("Please specify an action to perform."), dbg.warning)
        exit(1)


########################################
# Update device state
########################################
for device in target_devices:
    if not device["available"]:
        continue

    zones = target_zones
    if len(target_zones) == 0:
        zones = device["zones"]

    details = middleman.get_device(device["backend"], device["uid"])

    for zone in zones:
        # Brightness
        if args.brightness:
            status = middleman.set_device_state(device["backend"], device["uid"], "brightness", zone, [], [int(args.brightness)])
            if status == False:
                dbg.stdout(_("Failed to set brightness for [].").replace("[]", device["name"]), dbg.error)
            elif type(status) == str:
                dbg.stdout(_("Request failed. Here's the exception details:"), dbg.error)
                dbg.stdout(status)

        # Effect
        if args.effect:
            effect = args.effect
            effect_params = []

            # Validate request is possible
            try:
                details["zone_supported"][zone][effect]
            except KeyError:
                dbg.stdout(_("[name]: '[fx]' effect not supported in zone '[zone]'")
                    .replace("[name]", details["name"])
                    .replace("[fx]", effect)
                    .replace("[zone]", zone), dbg.warning)
                continue

            # Determine parameters
            # TODO: Read 'zone_states' when params unspecified.

            if effect == "wave":
                if args.wave_direction:
                    direction = {
                        "right": 1,     # Right / Up / Clockwise
                        "left": 2       # Left / Down / Anti-clockwise
                    }
                    effect_params = [direction[args.wave_direction]]
                else:
                    # Default
                    effect_params = [1]

            if effect == "reactive":
                if args.reactive_speed:
                    speed = {
                        "fast": 1,
                        "medium": 2,
                        "slow": 3,
                        "vslow": 4
                    }
                    effect_params = [speed[args.reactive_speed]]
                else:
                    # Default
                    effect_params = [2]

            if effect == "breath":
                if args.breath_type:
                    effect = "breath_" + args.breath_type
                else:
                    # Default
                    effect = "breath_single"

            if effect == "ripple":
                if args.ripple_type:
                    effect = "ripple_" + args.ripple_type
                else:
                    # Default
                    effect = "ripple_single"

                if args.ripple_speed:
                    effect_params = [args.ripple_speed]
                else:
                    effect_params = [0.01]

            if effect == "starlight":
                if args.starlight_type:
                    effect = "starlight_" + args.starlight_type
                else:
                    # Default
                    effect = "starlight_single"

            # Determine and validate colours
            colours = []
            for hex_value in [args.rgb, args.rgb2, args.rgb3]:
                if hex_value:
                    try:
                        common.hex_to_rgb(hex_value)
                    except ValueError:
                        dbg.stdout(_("Invalid 6 digit hex colour: []").replace("[]", args.rgb), dbg.error)
                        exit(1)
                colours.append(hex_value)

            status = middleman.set_device_state(device["backend"], device["uid"], effect, zone, colours, effect_params)

            if status == False:
                dbg.stdout(_("Failed to set '[fx]' effect for [name].")
                    .replace("[name]", device["name"])
                    .replace("[fx]", effect), dbg.error)
            elif type(status) == str:
                dbg.stdout(_("Request failed. Here's the exception details:"), dbg.error)
                dbg.stdout(status)

    # Game Mode
    if args.game_mode:
        if details["game_mode"] == None:
            continue

        state = {
            "on": True,
            "off": False
        }
        state = state[args.game_mode]

        status = middleman.set_device_state(device["backend"], device["uid"], "game_mode", "main", [], [state])

        if status == False:
            dbg.stdout(_("Failed to change for [name].").replace("[name]", device["name"]), dbg.error)
        elif type(status) == str:
            dbg.stdout(_("Request failed. Here's the exception details:"), dbg.error)
            dbg.stdout(status)
        elif status == True:
            if state == True:
                dbg.stdout(_("Game mode /enabled\ for [name]")
                    .replace("[name]", device["name"])
                    .replace("/", dbg.success)
                    .replace("\\", dbg.normal))
            else:
                dbg.stdout(_("Game mode /disabled\ for [name]")
                    .replace("[name]", device["name"])
                    .replace("/", dbg.error)
                    .replace("\\", dbg.normal))

    # DPI
    if args.dpi:
        if details["dpi_x"] == None:
            continue

        # Custom X and Y can be specified by adding a comma
        dpi = args.dpi
        if dpi.find(",") > 0:
            dpi_x = dpi.split(",")[0]
            dpi_y = dpi.split(",")[1]
        else:
            dpi_x = dpi
            dpi_y = dpi

        # Validate DPI is not too low
        for value in [dpi_x, dpi_y]:
            if int(value) < min_dpi:
                dbg.stdout(_("DPI too low: [x]").replace("[x]", value), dbg.error)
                continue

        status = middleman.set_device_state(device["backend"], device["uid"], "dpi", "main", [], [dpi_x, dpi_y])

        if status == False:
            dbg.stdout(_("Failed to set DPI for [name].").replace("[name]", device["name"]), dbg.error)
        elif type(status) == str:
            dbg.stdout(_("Request failed. Here's the exception details:"), dbg.error)
            dbg.stdout(status)
        elif status == True:
            dbg.stdout(_("DPI set to [x] for [name]").replace("[name]", device["name"]).replace("[x]", "{0},{1}".format(dpi_x, dpi_y)), dbg.success)

    # Poll Rate
    if args.poll_rate:
        if details["poll_rate"] == None:
            continue

        status = middleman.set_device_state(device["backend"], device["uid"], "poll_rate", "main", [], [args.poll_rate])

        if status == False:
            dbg.stdout(_("Failed to set poll rate for [name].").replace("[name]", device["name"]), dbg.error)
        elif type(status) == str:
            dbg.stdout(_("Request failed. Here's the exception details:"), dbg.error)
            dbg.stdout(status)
        elif status == True:
            dbg.stdout(_("Poll rate set to [x] Hz for [name]").replace("[name]", device["name"]).replace("[x]", args.poll_rate), dbg.success)
