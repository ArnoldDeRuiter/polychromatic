#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2016 Terry Cain <terry@terrys-home.co.uk>
#               2015-2019 Luke Horwell <code@horwell.me>
#

import gi
gi.require_version("Gtk", "3.0")
gi.require_version("Gdk", "3.0")
from gi.repository import Gtk, Gdk

try:
    gi.require_version("AppIndicator3", "0.1")
    from gi.repository import AppIndicator3 as appindicator
    indicator_support = True
except:
    indicator_support = False

import argparse
import os
import sys
import signal
import setproctitle
from subprocess import Popen as background_process
from subprocess import call as foreground_process
from shutil import which

# Import OpenRazer
try:
    import openrazer.client as rclient
except Exception as e:
    print("Failed to import modules for daemon.")
    print("Exception: " + str(e))
    exit(1)

try:
    # Relative copy
    import pylib.preferences as pref
    import pylib.common as common
except ImportError:
    # Installed to system
    import polychromatic.preferences as pref
    import polychromatic.common as common
except Exception as e:
    print("One or more of Polychromatic's modules could not be imported!")
    print("Check your PYTHONPATH or try re-installing.")
    print("\nException: " + str(e))
    exit(1)

path = pref.Paths()
session_storage = os.path.join("/run/user/", str(os.getuid()), "polychromatic-tray-applet")

"""
GTK-based tray applet to control OpenRazer devices from the desktop environment.
"""

# Functions for populating the indicator/applet.
def create_menu_item(label, enabled, function=None, function_params=None, icon_path=None):
    """
    Returns a Gtk menu item for use in menus.
        label               str     Text to display to the user.
        enabled             bool    Whether the selection should be highlighted or not.
        function            obj     Callback when button is clicked.
        function_params     obj     Functions to pass the callback function.
        icon_path           str     Path to image file.
    """
    if icon_path and os.path.exists(icon_path):
        item = Gtk.ImageMenuItem(Gtk.STOCK_NEW, label=label)
        item.set_sensitive(enabled)
        item.show()

        img = Gtk.Image()
        img.set_from_file(icon_path)
        item.set_image(img)
    else:
        item = Gtk.MenuItem(label)
        item.set_sensitive(enabled)
        item.show()

    if function and not function_params:
        item.connect("activate", function)
    elif function and function_params:
        item.connect("activate", function, function_params)

    return item

def create_submenu_item(submenu, label, enabled, function=None, function_params=None, icon_path=None):
    """
    Appends a Gtk menu item to a submenu list.
        submenu             lst     Submenu created by create_submenu()
        <inherits create_menu_item parameters>
    """
    submenu[1].append(create_menu_item(label, enabled, function, function_params, icon_path))
    return

def create_submenu(label, enabled, icon_path=None):
    """
    Returns a Gtk menu item for sub-menu options.
        label               str     Text to display to the user.
        enabled             bool    Whether the selection should be highlighted or not.

    Returns list of objects:
        item                MenuItem (for parent menu)
        menu                Menu (containing child menu items)
    """
    if icon_path and os.path.exists(icon_path):
        item = Gtk.ImageMenuItem(Gtk.STOCK_NEW, label=label)
        item.set_sensitive(enabled)
        item.show()

        img = Gtk.Image()
        img.set_from_file(icon_path)
        item.set_image(img)
    else:
        item = Gtk.MenuItem(label)
        item.set_sensitive(enabled)
        item.show()

    menu = Gtk.Menu()
    menu.show()
    item.set_submenu(menu)

    return[item, menu]

def create_seperator():
    """
    Returns a Gtk seperator object.
    """
    sep = Gtk.SeparatorMenuItem()
    sep.show()
    return sep

def get_icon(img_dir, icon):
    """
    Returns the path for a Polychromatic icon.
        img_dir = Folder inside "ui/img", e.g. "effects"
        icon    = Filename, including extension.
    """
    return os.path.join(common.DATA_PATH, "ui/img/", img_dir, icon)


class AppIndicator(object):
    """
    Indicator applet that provides quick access to device options from the system tray.
    """
    def __init__(self):
        self.devman = None
        self.indicator = None

    def setup(self):
        """
        Early stages to initalise the new tray applet.
        """
        # User can optionally use 'legacy' GTK status icon.
        if pref.get("tray_icon", "force_fallback", False) == True:
            global indicator_support
            indicator_support = False

        # Create an indicator or status icon depending on support.
        if indicator_support:
            self.indicator = appindicator.Indicator.new("polychromatic-tray-applet", self._get_tray_icon(), appindicator.IndicatorCategory.APPLICATION_STATUS)
            self.indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
            dbg.stdout(_("Initialised AppIndicator."), dbg.success, 1)
        else:
            self.indicator = Gtk.StatusIcon()
            self.indicator.set_name("polychromatic-tray-applet")
            self.indicator.set_from_file(self._get_tray_icon())
            self.indicator.set_visible(True)
            dbg.stdout(_("Initialised GTK Status Icon (fallback)."), dbg.success, 1)

        # Check OpenRazer is installed.
        if not which("openrazer-daemon"):
            self._setup_failed(_("OpenRazer Module Missing"), _("Unknown command: openrazer-daemon"))
            return False

        # Initialise OpenRazer
        try:
            self.devman = rclient.DeviceManager()
        except Exception as e:
            self._setup_failed(_("Daemon Initalization Error"), str(e))
            return False

        self.devman.sync_effects = False

        # Generate the applet
        self.build_indicator()
        dbg.stdout("Finished setting up applet.", dbg.success, 1)


    def _get_tray_icon(self):
        """
        Returns path or filename for tray icon.
        """
        return common.get_tray_icon(dbg, pref, path)

    def _show_menu_cb(self, widget, button, time, data=None):
        """
        Shows the non-indicator "legacy" implementation of the menu.
        """
        self.menu.show_all()
        self.menu.popup(None, None, Gtk.StatusIcon.position_menu, self.indicator, button, time)

    def _setup_failed(self, error_reason, exception=None):
        """
        A simple menu is displayed when something goes wrong.
        """
        dbg.stdout("Creating simple fallback applet...", dbg.action, 1)
        root = Gtk.Menu()
        root.append(create_menu_item(error_reason, False))
        root.append(create_menu_item(_("Exception:") + ' ' + exception, False))
        root.append(create_seperator())
        root.append(create_menu_item(_("Try again"), True, cb.retry_applet, None, get_icon("fa", "refresh.svg")))
        root.append(create_menu_item(_("Troubleshoot"), True, cb.launch_controller, "troubleshoot", get_icon("fa", "preferences.svg")))
        root.append(create_menu_item(_("Restart OpenRazer Daemon"), True, cb.restart_daemon, None, get_icon("logo", "openrazer-alt.svg")))
        root.append(create_seperator())
        root.append(create_menu_item(_("Open Controller"), True, cb.launch_controller, None, get_icon("general", "controller.svg")))
        root.append(create_menu_item(_("Quit"), True, cb.quit))

        if indicator_support:
            self.indicator.set_title("Polychromatic")
            self.indicator.set_icon(get_icon("../../tray/", "error.svg"))
            self.indicator.set_menu(root)
        else:
            self.indicator.set_from_file(get_icon("../../tray/", "error.svg"))
            self.menu = root
            self.indicator.connect("popup-menu", self._show_menu_cb)

        dbg.stdout("ERROR: " + error_reason, dbg.error)
        if exception:
            dbg.stdout("Exception: " + exception, dbg.error)

    def build_indicator(self):
        """
        Populates the menu for the tray applet.
        """
        # Load the tray icon
        if indicator_support:
            self.indicator.set_icon(self._get_tray_icon())
        else:
            self.indicator.set_from_file(self._get_tray_icon())

        dbg.stdout("Creating menus...", dbg.action, 1)
        root = Gtk.Menu()

        devices = self.devman.devices
        incompatible_list = common.get_incompatible_device_list(dbg, devices)

        # List devices and their submenus.
        if len(devices) == 0:
            no_devices_listed = True
            root.append(create_menu_item(_("No devices found."), False))
        else:
            no_devices_listed = False
            for device in self.devman.devices:
                root.append(self.build_device_submenu(device)[0])

        # List any devices that are physically connected, but not registered by the daemon.
        for device in incompatible_list:
            dbg.stdout("USB PID {0}:{1} is Razer hardware, but wasn't registered by the daemon.".format(device[0], device[1]), dbg.debug, 1)
            root.append(create_menu_item("{0}: {1}:{2}".format(_("Unrecognized"), device[0], device[1]), False, None, None, get_icon("devices", "unknown.svg")))
            if len(self.devman.devices) == 0:
                no_devices_listed = True

        # If no usable devices found, show options to assist.
        if no_devices_listed:
            dbg.stdout("No devices can be configured.", dbg.error, 1)
            root.append(create_seperator())
            root.append(create_menu_item(_("Try again"), True, cb.retry_applet, None, get_icon("fa", "refresh.svg")))
            root.append(create_menu_item(_("Troubleshoot"), True, cb.launch_controller, "troubleshooter", get_icon("fa", "preferences.svg")))
            root.append(create_menu_item(_("Restart OpenRazer Daemon"), True, cb.restart_daemon, None, get_icon("logo", "openrazer-alt.svg")))

        # Show actions that apply to all devices
        if not no_devices_listed and len(self.devman.devices) > 1:
            root.append(create_seperator())
            bulk_submenu = create_submenu(_("Apply to All"), True, get_icon("devices", "all.svg"))

            # -- Effects
            create_submenu_item(bulk_submenu, _("Effects"), False)
            unsupported_all_effects = False
            for device in self.devman.devices:
                for effect in ["spectrum", "wave", "breath_single", "reactive", "static"]:
                    if not device.has("lighting_" + effect):
                        unsupported_all_effects = True
                        continue

            if unsupported_all_effects:
                create_submenu_item(bulk_submenu, _("(Not supported by all devices)"), False)

            create_submenu_item(bulk_submenu, _("Spectrum"), True, cb.set_all_effect, "spectrum", get_icon("effects", "spectrum.svg"))
            create_submenu_item(bulk_submenu, _("Wave"), True, cb.set_all_effect, "wave", get_icon("effects", "wave.svg"))
            create_submenu_item(bulk_submenu, _("Breath"), True, cb.set_all_effect, "breath", get_icon("effects", "breath.svg"))
            create_submenu_item(bulk_submenu, _("Reactive"), True, cb.set_all_effect, "reactive", get_icon("effects", "reactive.svg"))
            create_submenu_item(bulk_submenu, _("Static"), True, cb.set_all_effect, "static", get_icon("effects", "static.svg"))

            # -- Brightness
            bulk_submenu[1].append(create_seperator())
            create_submenu_item(bulk_submenu, _("Brightness"), False)
            create_submenu_item(bulk_submenu, " 100% / " + _("On"), True, cb.set_all_brightness, "100", get_icon("brightness", "100.svg"))
            create_submenu_item(bulk_submenu, " 75%", True, cb.set_all_brightness, "75", get_icon("brightness", "75.svg"))
            create_submenu_item(bulk_submenu, " 50%", True, cb.set_all_brightness, "50", get_icon("brightness", "50.svg"))
            create_submenu_item(bulk_submenu, " 25%", True, cb.set_all_brightness, "25", get_icon("brightness", "25.svg"))
            create_submenu_item(bulk_submenu, " 0% / " + _("Off"), True, cb.set_all_brightness, "0", get_icon("brightness", "0.svg"))

            root.append(bulk_submenu[0])

        # General Options
        root.append(create_seperator())
        root.append(create_menu_item(_("Open Controller"), True, cb.launch_controller, None, get_icon("general", "controller.svg")))
        root.append(create_menu_item(_("Quit"), True, cb.quit))

        # Finalise tray applet.
        if indicator_support:
            self.indicator.set_title("Polychromatic")
            self.indicator.set_menu(root)
        else:
            self.menu = root
            self.indicator.connect("popup-menu", self._show_menu_cb)

    def build_device_submenu(self, device):
        """
        Starts beginning the root menu (and its submenus) to manage a device.
        """
        cb = Callback()
        device_name = device.name
        multiple_sources = common.has_multiple_sources(device)
        submenu = create_submenu(device_name, True, common.get_device_image(device, common.DATA_PATH))
        dbg.stdout("- {0}".format(device_name), dbg.action, 1)

        def _get_option_icon(device, source, img_dir, icon):
            """
            Returns the source icon if device has multiple sources (e.g. logo = logo),
            otherwise show an icon representing the menu option, e.g. brightness = bulb.
            """
            if multiple_sources:
                return os.path.join(common.DATA_PATH, "/ui/", common.get_source_icon(device, source))
            else:
                return get_icon(img_dir, icon)

        # Effects
        def _create_effect_submenu(source):
            """
            Builds an individual submenu for setting a device's effects.

            source          str     "main", "logo", etc
            """
            dbg.stdout("  - Effects", dbg.debug, 1)
            item_name = _("Effects")

            if multiple_sources:
                item_name = common.get_source_name(source, device) + ' ' + item_name

            submenu = create_submenu(item_name, True, _get_option_icon(device, source, "fa", "effects.svg"))

            if source == "main":
                prefix = "lighting_"
            else:
                prefix = "lighting_" + source + "_"

            if device.has(prefix + "spectrum"):
                create_submenu_item(submenu, _("Spectrum"), True, cb.set_effect, [device, source, "spectrum"], get_icon("effects", "spectrum.svg"))

            if device.has(prefix + "wave"):
                localised_directions = common.get_wave_direction(device)
                left = localised_directions[0]
                right = localised_directions[1]

                wave_menu = create_submenu(_("Wave"), True, get_icon("effects", "wave.svg"))
                create_submenu_item(wave_menu, left, True, cb.set_effect, [device, source, "wave", 2])
                create_submenu_item(wave_menu, right, True, cb.set_effect, [device, source, "wave", 1])
                submenu[1].append(wave_menu[0])

            if device.has(prefix + "reactive"):
                reactive_menu = create_submenu(_("Reactive"), True, get_icon("effects", "reactive.svg"))
                create_submenu_item(reactive_menu, _("Very Fast"), True, cb.set_effect, [device, source, "reactive", 0])
                create_submenu_item(reactive_menu, _("Fast"), True, cb.set_effect, [device, source, "reactive", 1])
                create_submenu_item(reactive_menu, _("Medium"), True, cb.set_effect, [device, source, "reactive", 2])
                create_submenu_item(reactive_menu, _("Slow"), True, cb.set_effect, [device, source, "reactive", 3])
                submenu[1].append(reactive_menu[0])

            if device.has(prefix + "breath_random") or device.has(prefix + "breath_single"):
                breath_menu = create_submenu(_("Breath"), True, get_icon("effects", "breath.svg"))
                if device.has(prefix + "breath_random"):
                    create_submenu_item(breath_menu, _("Random"), True, cb.set_effect, [device, source, "breath", "random"])
                if device.has(prefix + "breath_single"):
                    create_submenu_item(breath_menu, _("Single"), True, cb.set_effect, [device, source, "breath", "single"])
                if device.has(prefix + "breath_dual"):
                    create_submenu_item(breath_menu, _("Dual"), True, cb.set_effect, [device, source, "breath", "dual"])
                if device.has(prefix + "breath_triple"):
                    create_submenu_item(breath_menu, _("Triple"), True, cb.set_effect, [device, source, "breath", "triple"])
                submenu[1].append(breath_menu[0])

            if device.has(prefix + "starlight_random") or device.has(prefix + "starlight_single"):
                starlight_menu = create_submenu(_("Starlight"), True, get_icon("effects", "starlight.svg"))
                if device.has(prefix + "starlight_random"):
                    create_submenu_item(breath_menu, _("Random"), True, cb.set_effect, [device, source, "starlight", "random"])
                if device.has(prefix + "starlight_single"):
                    create_submenu_item(breath_menu, _("Single"), True, cb.set_effect, [device, source, "starlight", "single"])
                if device.has(prefix + "starlight_dual"):
                    create_submenu_item(breath_menu, _("Dual"), True, cb.set_effect, [device, source, "starlight", "dual"])
                if device.has(prefix + "starlight_triple"):
                    create_submenu_item(breath_menu, _("Triple"), True, cb.set_effect, [device, source, "starlight", "triple"])
                submenu[1].append(starlight_menu[0])

            if device.has(prefix + "blinking"):
                create_submenu_item(submenu, _("Blinking"), True, cb.set_effect, [device, source, "blinking"], get_icon("effects", "blinking.svg"))

            if device.has(prefix + "pulsate"):
                create_submenu_item(submenu, _("Pulsate"), True, cb.set_effect, [device, source, "pulsate"], get_icon("effects", "pulsate.svg"))

            if device.has(prefix + "ripple"):
                # Use a submenu if device supports both ripple effects.
                if device.has(prefix + "ripple_random"):
                    ripple_menu = create_submenu(_("Ripple"), True, get_icon("effects", "ripple.svg"))
                    create_submenu_item(ripple_menu, _("Single Color"), True, cb.set_effect, [device, source, "ripple", "single"])
                    create_submenu_item(ripple_menu, _("Random"), True, cb.set_effect, [device, source, "ripple", "random"])
                    submenu[1].append(ripple_menu[0])
                else:
                    # Just support ripple
                    create_submenu_item(submenu, _("Ripple"), True, cb.set_effect, [device, source, "ripple", "single"], get_icon("effects", "ripple.svg"))

            if device.has(prefix + "static"):
                create_submenu_item(submenu, _("Static"), True, cb.set_effect, [device, source, "static"], get_icon("effects", "static.svg"))

            if source == "main" and device.has("lighting_led_matrix"):
                submenu[1].append(create_seperator())

                create_submenu_item(submenu, _("Edit Effects..."), True, cb.launch_controller, "effects", get_icon("fa", "edit.svg"))

            return submenu

        if device.has("lighting"):
            submenu[1].append(_create_effect_submenu("main")[0])

        for source in common.get_supported_lighting_sources(device):
            if source != "main":
                submenu[1].append(_create_effect_submenu(source)[0])

        if multiple_sources:
            submenu[1].append(create_seperator())

        # Brightness
        def _create_brightness_submenu(source, toggle_only):
            """
            Builds an individual submenu for setting a device's brightness.

            source          str     "main", "logo", etc
            toggle_only     bool    True if this should show "on/off" controls.
            """
            dbg.stdout("  - Brightness", dbg.debug, 1)
            item_name = _("Brightness")

            if multiple_sources:
                item_name = common.get_source_name(source, device) + ' ' + item_name

            submenu = create_submenu(item_name, True, _get_option_icon(device, source, "fa", "lightbulb.svg"))

            if toggle_only:
                create_submenu_item(submenu, _("On"), True, cb.set_brightness, [device, source, 1], get_icon("brightness", "100.svg"))
                create_submenu_item(submenu, _("Off"), True, cb.set_brightness, [device, source, 0], get_icon("brightness", "0.svg"))
            else:
                for no in [100, 75, 50, 25, 0]:
                    create_submenu_item(submenu, str(no) + "%", True, cb.set_brightness, [device, source, no], get_icon("brightness", str(no) + ".svg"))

            return submenu

        if device.has("brightness"):
            submenu[1].append(_create_brightness_submenu("main", False)[0])

        if device.has("lighting_backlight_brightness") and not device.has("lighting_backlight_active"):
            submenu[1].append(_create_brightness_submenu("backlight", False)[0])
        if device.has("lighting_backlight_active") and not device.has("lighting_backlight_brightness"):
            submenu[1].append(_create_brightness_submenu("backlight", True)[0])

        if device.has("lighting_logo_brightness") and not device.has("lighting_logo_active"):
            submenu[1].append(_create_brightness_submenu("logo", False)[0])
        if device.has("lighting_logo_active") and not device.has("lighting_logo_brightness"):
            submenu[1].append(_create_brightness_submenu("logo", True)[0])

        if device.has("lighting_scroll_brightness") and not device.has("lighting_scroll_active"):
            submenu[1].append(_create_brightness_submenu("scroll", False)[0])
        if device.has("lighting_scroll_active") and not device.has("lighting_scroll_brightness"):
            submenu[1].append(_create_brightness_submenu("scroll", True)[0])

        if multiple_sources:
            submenu[1].append(create_seperator())

        # Game Mode
        if device.has("game_mode_led"):
            game_mode_menu = create_submenu(_("Game Mode"), True, get_icon("general", "game-mode.svg"))
            create_submenu_item(game_mode_menu, _("On"), True, cb.set_gamemode, [True], get_icon("general", "game-mode.svg"))
            create_submenu_item(game_mode_menu, _("Off"), True, cb.set_gamemode, [False], get_icon("general", "game-mode-disabled.svg"))
            submenu[1].append(game_mode_menu[0])

        # DPI
        if device.has("dpi"):
            dpi_menu = create_submenu(_("DPI"), True, get_icon("general", "dpi.svg"))
            dpi_range = common.get_dpi_range(device)
            min_dpi = dpi_range[0]
            max_dpi = device.max_dpi

            for dpi in dpi_range:
                if dpi == min_dpi:
                    dpi_icon = get_icon("general", "dpi-slow.svg")
                elif dpi == max_dpi:
                    dpi_icon = get_icon("general", "dpi-fast.svg")
                else:
                    dpi_icon = None
                create_submenu_item(dpi_menu, str(dpi), True, cb.set_dpi, int(dpi), dpi_icon)
            submenu[1].append(dpi_menu[0])

        # Polling Rate
        if device.has("poll_rate"):
            poll_menu = create_submenu(_("Polling Rate"), True, get_icon("fa", "poll-rate.svg"))
            create_submenu_item(poll_menu, _("125 Hz (8ms)"), True, cb.set_poll_rate, [125])
            create_submenu_item(poll_menu, _("500 Hz (2ms)"), True, cb.set_poll_rate, [500])
            create_submenu_item(poll_menu, _("1000 Hz (1ms)"), True, cb.set_poll_rate, [1000])
            submenu[1].append(poll_menu[0])

        # Colour (repeats last effect)
        if not common.is_device_fixed_colour(device):
            colour_menu = create_submenu(_("Change Color"), True, get_icon("fa", "palette.svg"))
            if common.is_device_greenscale(device):
                col_index = common.get_green_shades()
            else:
                col_index = pref.load_file(path.colours)

            def _get_colour_icon(colour_hex):
                """
                Generates a colour block, and gets the path for use as an icon.

                Params:
                    colour_hex      Hex value, e.g. "#00FF00"
                """
                colour_path = os.path.join(session_storage, "{0}.png".format(colour_hex.strip("#")))
                if not os.path.exists(colour_path):
                    dbg.stdout("Generating colour bitmap: " + colour_hex, dbg.action, 1)
                    foreground_process("convert -size 22x22 xc:{0} {1}".format(colour_hex, colour_path), shell=True)
                if not os.path.exists(colour_path):
                    dbg.stdout("ERROR: Failed to generate bitmap: " + colour_hex, dbg.error)
                    return None
                return colour_path

            for pos in range(0, len(col_index)):
                try:
                    name = col_index[pos]["name"]
                    hex_value = col_index[pos]["hex"]
                    create_submenu_item(colour_menu, name, True, cb.set_colour, [device, source, hex_value], _get_colour_icon(hex_value))
                except Exception:
                    dbg.stdout("Ignoring invalid colour data at index position " + str(pos), dbg.error)

            colour_menu[1].append(create_seperator())
            create_submenu_item(colour_menu, _("Open Color Picker"), True, cb.set_custom_colour, [device], get_icon("fa", "palette.svg"))
            create_submenu_item(colour_menu, _("Edit Colors..."), True, cb.launch_controller, ["colours"], get_icon("fa", "edit.svg"))
            submenu[1].append(create_seperator())
            submenu[1].append(colour_menu[0])

        return submenu


class Callback():
    """
    Contains functions that run when a menu item is clicked.
    """
    def launch_controller(cb, item, jump_to=None):
        """
        GTK menu item callback to open the Controller application.

        Params:
            jump_to     (Optional) Opens a specific tab in the Controller (see
                        polychromatic-controller args for options)
        """
        if jump_to:
            dbg.stdout("=> Launch Controller to '{0}' UI".format(jump_to))
        else:
            dbg.stdout("=> Launch Controller", dbg.debug, 1)

        common.execute_polychromatic_component(dbg, "controller", __file__, common.DATA_PATH, jump_to)

    def quit(cb, item):
        """
        GTK menu item callback to quit the application.
        """
        dbg.stdout("Exiting...", dbg.action, 1)
        exit(0)

    def retry_applet(cb, item):
        """
        GTK menu item callback to restart the tray applet.
        """
        dbg.stdout("Restarting applet...", dbg.action, 1)
        os.execv(__file__,  sys.argv)
        exit(0)

    def restart_daemon(cb, item):
        """
        GTK menu item callback to restart the OpenRazer daemon.
        """
        dbg.stdout("=> Restart Daemon", dbg.debug, 1)
        item.set_label(_("Restarting..."))
        item.set_sensitive(False)
        common.restart_openrazer_daemon(dbg, self.path)
        self.retry_applet()

    def set_effect(cb, item, attr):
        """
        GTK menu item to set an effect for a device.

        Params:
            attr    [device, source, effect]
        """
        device = attr[0]
        source = attr[1]
        effect = attr[2]
        try:
            effect_params = attr[3]
        except Exception:
            effect_params = None
        common.set_lighting_effect(pref, device, source, effect, effect_params)

    def set_brightness(cb, item, attr):
        """
        GTK menu item callback to set the brightness of a device.

        Params:
            attr    [device, source, value]
        """
        device = attr[0]
        source = attr[1]
        value = attr[2]
        common.set_brightness(pref, device, source, value)

    def set_colour(cb, item, attr):
        """
        GTK menu item callback to replay the current effect but use a different
        primary colour.

        Params:
            attr    [device, source, hex_string]
        """
        device = attr[0]
        source = attr[1]
        hex_value = attr[2]
        common.save_colours_to_all_sources(pref, device, "colour_primary", hex_value)
        common.repeat_last_effect(pref, device)

    def set_dpi(cb, item, attr):
        """
        GTK menu item callback to set the DPI of a device.

        Params:
            attr    [device, new_dpi]
        """
        device = attr[0]
        new_dpi = attr[1]
        device.dpi = (new_dpi, new_dpi)

    def set_poll_rate(cb, item, attr):
        """
        GTK menu item callback to set the poll rate of a device.

        Params:
            attr    [device, new_poll_rate]
        """
        device = attr[0]
        new_poll_rate = attr[1]
        device.poll_rate = new_poll_rate

    def set_gamemode(cb, item, attr):
        """
        GTK menu item callback to set the game mode of a keyboard.

        Params:
            attr    [device, new_state]
        """
        device = attr[0]
        state = attr[1]
        device.game_mode_led = state

    def set_all_effect(cb, item, effect_name):
        """
        GTK menu item callback to set an effect for all devices (using defaults)

        Params:
            effect_name     Internal effect name
        """
        for device in indicator.devman.devices:
            for source in common.get_supported_lighting_sources(device):
                common.set_lighting_effect(pref, device, source, effect_name)

    def set_all_brightness(cb, item, value):
        """
        GTK menu item callback to set the brightness for all devices (or
        on/off if unsupported)

        Params:
            value           String representing brightness %
        """
        value = str(value)
        for device in indicator.devman.devices:
            for source in common.get_supported_lighting_sources(device):
                common.set_brightness(pref, device, source, value)

    def set_custom_colour(cb, item, attr):
        """
        GTK menu item callback to open a GTK dialogue picker to change the colour
        of a device.

        Params:
            attr    [device object]
        """
        device = attr[0]

        color_selection_dlg = Gtk.ColorSelectionDialog(_("Set Primary Color"))
        color_selection_result = color_selection_dlg.run()

        if color_selection_result == Gtk.ResponseType.OK:
            result_gdk_colour = color_selection_dlg.get_color_selection().get_current_color()
            red = int(result_gdk_colour.red_float * 255)
            green = int(result_gdk_colour.green_float * 255)
            blue = int(result_gdk_colour.blue_float * 255)
            custom_hex = common.rgb_to_hex([red, green, blue])

            dbg.stdout("Set custom colour to: {0} ({1}, {2}, {3})".format(custom_hex, str(red), str(green), str(blue)), dbg.debug, 1)
            common.save_colours_to_all_sources(pref, device, "colour_primary", custom_hex)
            common.repeat_last_effect(pref, device)

        color_selection_dlg.destroy()


def parse_parameters():
    """
    Parses the optional parameters for the tray applet.
    """
    global _
    parser = argparse.ArgumentParser(add_help=False)
    parser._optionals.title = _("Optional arguments")
    parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
    parser.add_argument("-v", "--verbose", help=_("Be verbose to stdout"), action="store_true")
    parser.add_argument("--locale", help=_("Force a specific locale, e.g. de_DE"), action="store")
    parser.add_argument("--force-fallback", help=_("Force GTK Status Icon instead of AppIndicator"), action="store_true")

    args = parser.parse_args()

    if args.verbose:
        dbg.verbose_level = 1
        dbg.stdout(_("Verbose enabled"), dbg.debug, 1)

    if args.locale:
        _ = common.setup_translations(__file__, "polychromatic", args.locale)

    if args.force_fallback:
        global indicator_support
        indicator_support = False


if __name__ == "__main__":
    # Appear as its own process.
    setproctitle.setproctitle("polychromatic-tray-applet")

    # Kill the process when CTRL+C'd.
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    # Prepare temporary session storage
    if not os.path.exists(session_storage):
        os.makedirs(session_storage)

    # Write a PID file for restarting later.
    f = open(common.PID_FILE_TRAY, 'w')
    f.write(str(os.getpid()))
    f.close()

    _ = common.setup_translations(__file__, "polychromatic")
    dbg = common.Debugging()
    parse_parameters()

    # Initialise the indicator
    cb = Callback()
    indicator = AppIndicator()
    indicator.setup()

    Gtk.main()

    # Application Closed
    if os.path.exists(common.PID_FILE_TRAY):
        os.remove(common.PID_FILE_TRAY)
    exit(0)
