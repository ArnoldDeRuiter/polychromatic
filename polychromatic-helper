#!/usr/bin/python3
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2020 Luke Horwell <code@horwell.me>
#

"""
A multipurpose "helper" process that runs in the background to control separate
operations of Polychromatic, such as:

- Playback of custom effects on specific hardware.
- Monitor and process automatic rules (triggers)
- Autostart the tray applet and resume previous custom effects.

The helper intends to be as lightweight and minimal as possible as there could
be multple helper processes running simultaneously. It also is designed to be
'terminated' without fuss as Polychromatic will record PIDs for the components.
"""
VERSION = "0.6.0"

import argparse
import setproctitle
import os
import json
import time

# Import modules if running relatively.
if os.path.exists(os.path.join(os.path.dirname(__file__), "pylib")):
    try:
        import pylib.common as common
        import pylib.effects as effects
        import pylib.preferences as preferences
        import pylib.procpid as procpid
        import pylib.middleman as middleman_module
    except (ImportError, Exception) as e:
        print("Failed to import modules relatively.\n")
        raise e

# Import modules if installed system-wide.
else:
    try:
        import polychromatic.common as common
        import polychromatic.effects as effects
        import polychromatic.preferences as preferences
        import polychromatic.procpid as procpid
        import polychromatic.middleman as middleman_module
    except (ImportError, Exception) as e:
        print("Polychromatic's modules could not be imported.")
        print("Check all dependencies are installed, the Python environment variables are correct, or try re-installing the application.\n")
        raise e


def autostart():
    """
    Intended to run at login.

    - If enabled, start the tray applet.
    - If configured, activate any 'welcome' and/or 'login' triggers.
    - If a custom effect was last played, but the device isn't bound to a 'login' trigger, run it again.
    - If triggers are set up, start the process and monitor for changes.

    This instance will exit as soon as the checks have completed.
    """
    # If backend hasn't initialized already, try again.
    timeout = 10
    while len(middleman.backends) == 0 and timeout > 0:
        dbg.stdout("Still waiting for backends to be ready...", dbg.warning, 1)
        time.sleep(2)
        timeout = timeout - 1
        middleman.init()

    if len(middleman.backends) == 0:
        dbg.stdout("Timed out waiting for backends to load, or they are non-functional.", dbg.error)

    # Start Tray Applet
    if prefs["tray"]["autostart"]:
        delay = prefs["tray"]["autostart_delay"]
        if delay > 0:
            dbg.stdout("Starting tray applet in {0} second(s)...".format(delay), dbg.action, 1)
            time.sleep(delay)
        procpid.start_component("tray-applet")

    print("stub:Helpers.autostart")


def monitor_triggers():
    """
    Triggers may monitor different entities (e.g. time, a file or event)
    and this process will switch to a different preset when the conditions
    match.

    This process should always be running when there is at least one trigger set.
    """
    print("stub:Helpers.monitor_triggers")


def play_custom_effect(filepath, backend, uid):
    """
    Playback a custom effect by sending frames to the specified device.

    This process should be running until the custom effect reaches the end,
    or if it's looped, indefinity until interrupted.
    """
    effect = effects.get_effect(filepath)
    if not effect:
        dbg.stdout("\nUnable to render on device {0} on backend '{1}'!".format(uid, backend), dbg.error)
        exit(1)

    device = middleman.get_device_object(backend, int(uid))
    effect_type = effect["type"]

    if effect_type == "keyframed":
        # Showtime!
        frames = effects.render_keyframes(filepath)
        procpid.set_effect_state(device["serial"], effect["ui"]["name"], effect["ui"]["icon"])
        effects.send_effect_frames(frames, effect["data"]["fps"], device)

    elif effect_type == "scripted":
        # Determine scirpt path and check it exists alongside metadata.
        script_filename = os.path.basename(filepath).replace(".json", ".py")
        script_dir = os.path.dirname(filepath)
        script_path = os.path.join(script_dir, script_filename)

        if not os.path.exists(script_path):
            dbg.stdout("Metadata found, but script missing: " + script_path, dbg.error)
            exit(1)

        # Validate custom effect environment and parameters.
        if not effects.check_environment(effect, device):
            # This function will output errors to stdout.
            exit(1)

        params = effects.compute_script_parameters(effect)

        # Showtime!
        procpid.set_effect_state(device["serial"], effect["ui"]["name"], effect["ui"]["icon"])
        effects.send_effect_custom(script_path, device, params)

    else:
        dbg.stdout("Unknown effect type: " + effect_type, dbg.error)
        exit(1)


def parse_parameters():
    """
    Parse the parameters of what this helper has been summoned to do.
    """
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("--version", action="store_true")

    # Operations
    parser.add_argument("--autostart", action="store_true")
    parser.add_argument("--monitor-triggers", action="store_true")
    parser.add_argument("--play-custom-effect", action="store_true")

    # For playing custom effects
    parser.add_argument("--filepath", action="store")
    parser.add_argument("--device-backend", action="store")
    parser.add_argument("--device-uid", action="store")

    args = parser.parse_args()

    if args.version:
        dbg.stdout("Version " + VERSION)
        exit()

    if args.verbose:
        dbg.verbose_level = 1
        dbg.stdout("Verbose enabled", dbg.action, 1)

    return args


if __name__ == "__main__":
    prefs = preferences.load_file(common.paths.preferences)

    # Appear as its own process.
    setproctitle.setproctitle("polychromatic-helper")

    # i18n is not used for internal processes.
    def _(string):
        return string

    dbg = common.Debugging()
    args = parse_parameters()
    middleman = middleman_module.Middleman(dbg, common, _)
    middleman.init()

    if args.autostart:
        autostart()

    elif args.monitor_triggers:
        monitor_triggers()

    elif args.play_custom_effect:
        play_custom_effect(args.filepath, args.device_backend, args.device_uid)

    else:
        dbg.stdout("This executable is intended to be invoked by another Polychromatic process.", dbg.warning)
        exit(1)
