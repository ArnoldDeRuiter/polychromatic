#!/usr/bin/python3
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2020 Luke Horwell <code@horwell.me>
#               2015-2016 Terry Cain <terry@terrys-home.co.uk>

"""
The primary "Controller" GUI for Polychromatic based on PyQt5.
"""
VERSION = "0.6.0"

import argparse
import json
import os
import re
import signal
import threading
import setproctitle
import sys

from PyQt5 import uic, QtCore
from PyQt5.QtGui import QIcon, QPalette, QColor, QFontMetrics, QPixmap
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QProxyStyle, QStyle, QPushButton, QToolButton, QMessageBox, QListWidget, QTreeWidget, QTabBar, QTabWidget, QLabel, QComboBox

# Import modules if running relatively.
if os.path.exists(os.path.join(os.path.dirname(__file__), "pylib")):
    try:
        import pylib.preferences as pref
        import pylib.common as common
        import pylib.locales as locales
    except (ImportError, Exception) as e:
        print("Failed to import modules relatively.\n")
        raise e

# Import modules if installed system-wide.
else:
    try:
        import polychromatic.preferences as pref
        import polychromatic.common as common
        import polychromatic.locales as locales
    except (ImportError, Exception) as e:
        print("Polychromatic's modules could not be imported.")
        print("Check all dependencies are installed, the Python environment variables are correct, or try re-installing the application.\n")
        print(str(e))
        exit(1)


VERSIONS = {
    "pref": pref.VERSION,
    "qt": QtCore.PYQT_VERSION_STR,
    "python": "{0}.{1}.{2}".format(sys.version_info.major, sys.version_info.minor, sys.version_info.micro)
}


class MainWindow(QMainWindow):
    """
    The main window is the first window the user will use and interact with.
    """
    def __init__(self):
        super(MainWindow, self).__init__()
        uic.loadUi(os.path.join(DATA_PATH, "ui", "main.ui"), self)

        # Tabs - the custom design and native tabs
        self.MainTabWidget = self.findChild(QTabWidget, "MainTabWidget")
        self.MainTabs = self.findChild(QWidget, "MainTabs")

        # Custom tab design
        self.DevicesTabButton = self.findChild(QToolButton, "DevicesTabButton")
        self.EffectsTabButton = self.findChild(QToolButton, "EffectsTabButton")
        self.PresetsTabButton = self.findChild(QToolButton, "PresetsTabButton")
        self.TriggersTabButton = self.findChild(QToolButton, "TriggersTabButton")
        self.PreferencesTabButton = self.findChild(QToolButton, "PreferencesTabButton")

        # The real tabs
        self.DevicesTab = self.findChild(QWidget, "DevicesTab")
        self.EffectsTab = self.findChild(QWidget, "EffectsTab")
        self.PresetsTab = self.findChild(QWidget, "PresetsTab")
        self.TriggersTab = self.findChild(QWidget, "TriggersTab")
        self.PreferencesTab = self.findChild(QWidget, "PreferencesTab")

        # Load Polychromatic Qt theme
        if USE_POLY_QT_THEME:
            ui_palette = QPalette()
            black = QColor(0, 0, 0)
            white = QColor(255, 255, 255)
            primary = QColor(0, 255, 0)
            ui_palette.setColor(QPalette.Window, QColor(0, 0, 0))
            ui_palette.setColor(QPalette.WindowText, white)
            ui_palette.setColor(QPalette.Base, QColor(25, 25, 25))
            ui_palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
            ui_palette.setColor(QPalette.ToolTipBase, white)
            ui_palette.setColor(QPalette.ToolTipText, white)
            ui_palette.setColor(QPalette.Text, white)
            ui_palette.setColor(QPalette.Button, QColor(50, 50, 50)) #323232
            ui_palette.setColor(QPalette.ButtonText, white)
            ui_palette.setColor(QPalette.Link, primary)
            ui_palette.setColor(QPalette.Highlight, primary)
            ui_palette.setColor(QPalette.HighlightedText, black)
            self.setPalette(ui_palette)

            with open(os.path.join(DATA_PATH, "qt", "style.qss"), "r") as f:
                self.setStyleSheet(f.read().replace("[data]", DATA_PATH))

            # Hide the native tab 'buttons', use custom design widget.
            self.MainTabWidget.tabBar().hide()
        else:
            # Hide the custom design tab, use native tabs.
            self.Header.hide()
            self.MainTabs.hide()

        # Set window attributes
        self.setWindowIcon(QIcon(os.path.join(DATA_PATH, "ui", "img", "general", "controller.svg")))
        self.setWindowTitle("Polychromatic")

        # Set background for header/tabs
        self.Header = self.findChild(QWidget, "Header")
        self.MainTabs = self.findChild(QWidget, "MainTabs")
        self.Header.setStyleSheet("{0} #Header {{ background-image: url({1}) }}".format(self.Header.styleSheet(), os.path.join(DATA_PATH, "ui", "img", "bg", "header.png")));
        self.MainTabs.setStyleSheet("{0} #MainTabs {{ background-image: url({1}) }}".format(self.MainTabs.styleSheet(), os.path.join(DATA_PATH, "ui", "img", "bg", "tabs.png")))

        self.DeviceSidebarTree = self.findChild(QTreeWidget, "DeviceSidebarTree")
        self.DeviceSidebarTree.expandAll()


        # Close app
        def _quit_app(button):
            exit()

        self.CloseButton = self.findChild(QPushButton, "CloseApp")
        self.CloseButton.clicked.connect(_quit_app)

        self.show()
def parse_parameters():
    """
    Process the parameters passed to the application.
    """
    global _

    tab_choices = [
        "devices",
        "effects",
        "presets",
        "triggers",
        "preferences",
        "troubleshoot",
        "colours"
    ]

    parser = argparse.ArgumentParser(add_help=False)
    parser._optionals.title = _("Optional arguments")
    parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
    parser.add_argument("--version", help=_("Print program version and exit"), action="store_true")
    parser.add_argument("-v", "--verbose", help=_("Be verbose to stdout"), action="store_true")
    parser.add_argument("--locale", help=_("Force a specific language, e.g. de_DE"), action="store")
    parser.add_argument("--tab", help=_("Open a specific tab or section"), action="store", choices=tab_choices)

    args = parser.parse_args()

    if args.version:
        print("Polychromatic v{0}".format(VERSION))
        print("Qt " + VERSIONS["qt"])
        print("Python " + VERSIONS["python"])
        exit(0)

    if args.verbose:
        dbg.verbose_level = 1

    if args.locale:
        _ = locales.reload_locales(locales, __file__, args.locale)

    return args


if __name__ == "__main__":
    setproctitle.setproctitle("polychromatic-controller")

    DATA_PATH = common.get_data_dir_path()
    HIDPI = False

    path = pref.Paths()
    dbg = common.Debugging()
    _ = locales._

    parse_parameters()
    USE_POLY_QT_THEME = True

    if hasattr(QtCore.Qt, "AA_EnableHighDpiScaling"):
        QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)
        HIDPI = True

    if hasattr(QtCore.Qt, "AA_UseHighDpiPixmaps"):
        QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)

    app = QApplication(sys.argv)
    if USE_POLY_QT_THEME:
        app.setStyle("Fusion")

    window = MainWindow()
    app.exec_()
